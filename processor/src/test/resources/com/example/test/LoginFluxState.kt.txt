package com.example.test.generated

import com.github.rougsig.rxflux.core.Action
import com.github.rougsig.rxflux.core.FluxState
import com.github.rougsig.rxflux.core.Reducer
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlinx.collections.immutable.ImmutableMap
import kotlinx.collections.immutable.immutableHashMapOf

class LoginFluxState private constructor(private val map: ImmutableMap<Any, Any?>) :
        FluxState<LoginFluxState> {
    val phone: String
        get() = map["phone"] as String

    val password: String?
        get() = map["password"] as String?

    constructor(phone: String, password: String?) : this(map = immutableHashMapOf("phone" to
            phone,"password" to password))

    fun setPhone(phone: String) = LoginFluxState(map.put("phone", phone))

    fun setPassword(password: String?) = LoginFluxState(map.put("password", password))

    override fun toString() = map.toString()

    override fun hashCode() = map.hashCode()

    override fun equals(other: Any?): Boolean {
        if(other !is LoginFluxState) return false
        return map["phone"] == other.phone && map["password"] == other.password  }

    companion object {
        fun combineReducers(phoneReducer: Reducer<String, Action>, passwordReducer: Reducer<String?,
                Action>): Reducer<LoginFluxState, Action> = { s: LoginFluxState?, action: Action ->
        val state = s ?: LoginFluxState(map = immutableHashMapOf())
        val phoneOld = state.map["phone"] as? String
        val phoneNew = phoneReducer.invoke(phoneOld, action)
        val passwordOld = state.map["password"] as? String?
        val passwordNew = passwordReducer.invoke(passwordOld, action)
        state.let { if (phoneOld !== phoneNew) it.setPhone(phoneNew) else it }
        .let { if (passwordOld !== passwordNew) it.setPassword(passwordNew) else it }
        }
            }
        }
