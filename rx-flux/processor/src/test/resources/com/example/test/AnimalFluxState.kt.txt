package com.example.test.generated

import com.github.rougsig.rxflux.core.action.Action
import com.github.rougsig.rxflux.core.reducer.Reducer
import kotlin.Any
import kotlin.Boolean
import kotlinx.collections.immutable.ImmutableMap
import kotlinx.collections.immutable.immutableHashMapOf

class AnimalFluxState private constructor(private val map: ImmutableMap<Any, Any?>) {
    val duckState: DuckFluxState
        get() = map["duckState"] as DuckFluxState

    val catState: CatFluxState
        get() = map["catState"] as CatFluxState

    constructor(duckState: DuckFluxState, catState: CatFluxState) : this(map =
            immutableHashMapOf("duckState" to duckState,"catState" to catState))

    fun setDuckState(duckState: DuckFluxState) = AnimalFluxState(map.put("duckState", duckState))

    fun setCatState(catState: CatFluxState) = AnimalFluxState(map.put("catState", catState))

    override fun toString() = map.toString()

    override fun hashCode() = map.hashCode()

    override fun equals(other: Any?): Boolean {
        if(other !is AnimalFluxState) return false
        return map["duckState"] == other.duckState && map["catState"] == other.catState  }

    companion object {
        fun combineReducers(duckStateReducer: Reducer<DuckFluxState, Action>,
                catStateReducer: Reducer<CatFluxState, Action>): Reducer<AnimalFluxState, Action> =
                Reducer<AnimalFluxState> { s: AnimalFluxState?, action: Action ->
        val state = s ?: AnimalFluxState(map = immutableHashMapOf())
        val duckStateOld = state.map["duckState"] as? DuckFluxState
        val duckStateNew = duckStateReducer.reduce(duckStateOld, action)
        val catStateOld = state.map["catState"] as? CatFluxState
        val catStateNew = catStateReducer.reduce(catStateOld, action)
        state.let { if (duckStateOld !== duckStateNew) it.setDuckState(duckStateNew) else it }
        .let { if (catStateOld !== catStateNew) it.setCatState(catStateNew) else it }
        }
            }
        }
