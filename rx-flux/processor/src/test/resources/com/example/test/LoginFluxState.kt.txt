package com.example.test.generated

import com.example.test.Phone
import com.github.rougsig.rxflux.core.Action
import com.github.rougsig.rxflux.core.Reducer
import com.github.rougsig.rxflux.core.createReducer
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlinx.collections.immutable.ImmutableMap
import kotlinx.collections.immutable.immutableHashMapOf

class LoginFluxState private constructor(private val map: ImmutableMap<Any, Any?>) {
    val phone: Phone<Int, Long, Unit>
        get() = map["phone"] as Phone<Int, Long, Unit>

    val password: String?
        get() = map["password"] as String?

    constructor(phone: Phone<Int, Long, Unit>, password: String?) : this(map =
            immutableHashMapOf("phone" to phone,"password" to password))

    fun setPhone(phone: Phone<Int, Long, Unit>) = LoginFluxState(map.put("phone", phone))

    fun setPassword(password: String?) = LoginFluxState(map.put("password", password))

    override fun toString() = map.toString()

    override fun hashCode() = map.hashCode()

    override fun equals(other: Any?): Boolean {
        if(other !is LoginFluxState) return false
        return map["phone"] == other.phone && map["password"] == other.password  }

    companion object {
        fun combineReducers(phoneReducer: Reducer<Phone<Int, Long, Unit>, Action>,
                passwordReducer: Reducer<String?, Action>): Reducer<LoginFluxState, Action> =
                createReducer<LoginFluxState> { s: LoginFluxState?, action: Action ->
        val state = s ?: LoginFluxState(map = immutableHashMapOf())
        val phoneOld = state.map["phone"] as? Phone<Int, Long, Unit>
        val phoneNew = phoneReducer.reduce(phoneOld, action)
        val passwordOld = state.map["password"] as? String?
        val passwordNew = passwordReducer.reduce(passwordOld, action)
        state.let { if (phoneOld !== phoneNew) it.setPhone(phoneNew) else it }
        .let { if (passwordOld !== passwordNew) it.setPassword(passwordNew) else it }
        }
            }
        }
